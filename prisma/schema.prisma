// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int      @default(3)
  role      Role     @relation(fields: [roleId], references: [id])
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("users")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal
  quantity      Int
  barCode       String         @unique
  image         String?
  categoryId    Int            @default(1)
  storeId       Int
  store         Store          @relation(fields: [storeId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  size          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  OrderProducts OrderProduct[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  storeId   Int
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]

  @@map("categories")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("roles")
}

model Store {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  Product   Product[]
  Category  Category[]
  Order     Order[]

  @@map("stores")
}

model Order {
  id                 Int            @id @default(autoincrement())
  userId             Int
  user               User           @relation(fields: [userId], references: [id])
  storeId            Int
  store              Store          @relation(fields: [storeId], references: [id])
  paymentId          Int
  payment            PaymentMethod  @relation(fields: [paymentId], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  OrderProducts      OrderProduct[] 
  Invoices           Invoice[]
  installment        Boolean        @default(false)
  installmentsNumber Int            @default(1)
  totalPriceOrder    Decimal        @db.Decimal(16, 2)

  @@map("orders")
}

model OrderProduct {
  id                Int            @id @default(autoincrement())
  orderId           Int
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId         Int
  product           Product        @relation(fields: [productId], references: [id])
  quantity          Int
  price             Decimal        @db.Decimal(16, 2)
  totalPriceProduct Decimal        @db.Decimal(16, 2)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  PaymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   Int?

  @@map("order_products")
}

model PaymentMethod {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  OrderProducts OrderProduct[]
  Order         Order[]

  @@map("payment_methods")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    String   @default("pending")
  price     Decimal  @db.Decimal(16, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}
